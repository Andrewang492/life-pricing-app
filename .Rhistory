min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp()
runApp()
death_benefit <- 50000
interest_rates <- rep(0.03, 20)
discount_rates <- interest_rates + 0.05
death_benefit <- 50000
interest_rates <- rep(0.03, 20)
discount_rates <- interest_rates + 0.05
discount_rates
commission_percentages <- c(c(0.8), rep(0.05, 19))
commission_percentages
commission_percentages <- c(0.8, rep(0.05, 19))
commission_percentages
expenses <- c(100, rep(12.5, 19))
lapse_rates <- rep(0.01, 20)
seq?
;
seq()?
;
?seq
mortality_rates <- seq(0.001222, 0.002522)
mortality_rates
mortality_rates <- seq(0.001222, 0.002522, length.out = 20)
mortality_rates
c(1, 2, 3) * c(2 , 3, 4)
sum(c(1, 2, 3) * c(2 , 3, 4))
1/c(1,2,3)
annual_discount_factor <- 1/(1 + discount_rates)
annual_discount_factor
1/1.08
discount_factor[1] <- annual_discount_factor[1]
discount_factor
discount_factor <- rep(NA, 20) # used to discount to present value.
discount_factor[1] <- annual_discount_factor[1]
discount_factor
for (i in 2:20) {
discount_factor[i] <- annual_discount_factor[i] * discount_factor[i-1]
}
discount_factor
1.08^(-20)
1* (1-0.001222 - 0.01)
inforce_eop <- rep(NA, term)
inforce_eop[1] <- 1 * ( 1 - mortality_rates[1] - lapse_rates[1])
inforce_eop <- rep(NA, term)
term <- 20
inforce_eop <- rep(NA, term)
inforce_eop[1] <- 1 * ( 1 - mortality_rates[1] - lapse_rates[1])
for (i in 2:term) {
inforce_eop[i] <-  inforce_eop[i-1] * (1 - mortality_rates[i] - lapse_rates[i])
}
inforce_sop <- c(1, inforce_eop[1: term-1])
inforce_eop
inforce_sop
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum( c(1, discount_factor[1:term-1]) * inforce_sop)
expected_payout <- sum(discount_factor * mortality_rates)
discount_factor
mortality_rates
expected_payout
net_premium <- expected_payout /  expected_inflows
net_premium
expected_payout <- sum(discount_factor * mortality_rates) * death_benefit
net_premium <- expected_payout /  expected_inflows
profits <- rep(NA, 21) # has a year 0
net_premium
deaths <- inforce_sop * mortality_rates
lapses <- inforce_sop * lapse_rates
deaths
mortality_rates
discount_factor[1:10]
# find net premium reserves:
# to cover years 1 to term
discount_factors_advance <- c(1, discount_factor[1:term-1])
discount_factors_advance
# find net premium reserves:
# to cover years 1 to term
discount_factors_advance <- c(1, discount_factor[1:term-1])
reserves <- rep(NA, term)
for (i in 1:term) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_inflows - future_benefits)
}
reserves
net_premium
inforce_ssop
inforce_sop
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum(discount_factors_advance * inforce_sop)
expected_payout <- sum(discount_factor * deaths) * death_benefit
net_premium <- expected_payout / expected_inflows
net_premium
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum( c(1, discount_factor[1:term-1]) * inforce_sop)
expected_payout <- sum(discount_factor * deaths) * death_benefit
net_premium <- expected_payout / expected_inflows
net_premium
# find net premium reserves:
# to cover years 1 to term
reserves <- rep(NA, term)
for (i in 1:3) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_inflows - future_benefits)
}
reserves
for (i in 1:3) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_benefits - future_inflows)
}
reserves
for (i in 1:term) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_benefits - future_inflows)
}
reserves
c(reserves[2:term], 0) - c(reserves[1:term])
reserve_increase <- c(reserves[2:term], 0) - c(reserves[1:term])
for (i in 1:term) {
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profit[i] <- cash_flow + interest - reserve_increase
}
premium <- 100 # change to see profit.
for (i in 1:term) {
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profit[i] <- cash_flow + interest - reserve_increase
}
for (i in 1:term) {
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profits[i] <- cash_flow + interest - reserve_increase
}
warnings()
i <- 1
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
cash_flow
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
interest
profit[i] <- cash_flow + interest - reserve_increase
profits[i] <- cash_flow + interest - reserve_increase
for (i in 1:term) {
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profits[i] <- cash_flow + interest - reserve_increase[i]
}
profits
# present value
profit <- discount_factors * profits
# present value
profit <- discount_factor * profits
# ---- profits
profits <- rep(NA, 20)
for (i in 1:term) {
# account for inforce.
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profits[i] <- cash_flow + interest - reserve_increase[i]
}
# present value
profit <- discount_factor * profits
profit
# present value
profit <- sum(discount_factor * profits)
profit
premium <- 268 # change to see profit.
term <- 20
death_benefit <- 50000
interest_rates <- rep(0.03, term)
discount_addition <- 0.05
discount_rates <- interest_rates + discount_addition
commission_percentages <- c(0.8, rep(0.05, 19))
expenses <- c(100, rep(12.5, 19))
lapse_rates <- rep(0.01, term)
mortality_rates <- seq(0.001222, 0.002522, length.out = term)
premium_loading <- 0.3 # charge on premium to make profit.
premium <- 268 # change to see profit.
annual_discount_factor <- 1/(1 + discount_rates)
discount_factor <- rep(NA, term) # used to discount to present value.
discount_factor[1] <- annual_discount_factor[1]
for (i in 2:term) {
discount_factor[i] <- annual_discount_factor[i] * discount_factor[i-1]
}
discount_factors_advance <- c(1, discount_factor[1:term-1])
inforce_eop <- rep(NA, term)
inforce_eop[1] <- 1 * ( 1 - mortality_rates[1] - lapse_rates[1])
for (i in 2:term) {
inforce_eop[i] <-  inforce_eop[i-1] * (1 - mortality_rates[i] - lapse_rates[i])
}
inforce_sop <- c(1, inforce_eop[1: term-1])
deaths <- inforce_sop * mortality_rates
lapses <- inforce_sop * lapse_rates
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum(discount_factors_advance * inforce_sop)
expected_payout <- sum(discount_factor * deaths) * death_benefit
net_premium <- expected_payout / expected_inflows
# find net premium reserves:
# to cover years 1 to last year. ie available at start of each year
reserves <- rep(NA, term)
for (i in 1:term) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_benefits - future_inflows)
}
reserve_increase <- c(reserves[2:term], 0) - c(reserves[1:term])
# ---- profits
profits <- rep(NA, 20)
for (i in 1:term) {
# account for inforce.
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profits[i] <- cash_flow + interest - reserve_increase[i]
}
# present value
profit <- sum(discount_factor * profits)
profit
?numericInput
?renderText
source(playground.R)
pwd
pwd()
cwd()
source("playground.R")
source("playground.R")
calculateProfit(200)
calculateProfit<- function(premium) {
term <- 20
death_benefit <- 50000
interest_rates <- rep(0.03, term)
discount_addition <- 0.05
discount_rates <- interest_rates + discount_addition
commission_percentages <- c(0.8, rep(0.05, 19))
expenses <- c(100, rep(12.5, 19))
lapse_rates <- rep(0.01, term)
mortality_rates <- seq(0.001222, 0.002522, length.out = term)
premium_loading <- 0.3 # charge on premium to make profit.
#premium <- 200 # change to see profit.
annual_discount_factor <- 1/(1 + discount_rates)
discount_factor <- rep(NA, term) # used to discount to present value.
discount_factor[1] <- annual_discount_factor[1]
for (i in 2:term) {
discount_factor[i] <- annual_discount_factor[i] * discount_factor[i-1]
}
discount_factors_advance <- c(1, discount_factor[1:term-1])
inforce_eop <- rep(NA, term)
inforce_eop[1] <- 1 * ( 1 - mortality_rates[1] - lapse_rates[1])
for (i in 2:term) {
inforce_eop[i] <-  inforce_eop[i-1] * (1 - mortality_rates[i] - lapse_rates[i])
}
inforce_sop <- c(1, inforce_eop[1: term-1])
deaths <- inforce_sop * mortality_rates
lapses <- inforce_sop * lapse_rates
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum(discount_factors_advance * inforce_sop)
expected_payout <- sum(discount_factor * deaths) * death_benefit
net_premium <- expected_payout / expected_inflows
# find net premium reserves:
# to cover years 1 to last year. ie available at start of each year
reserves <- rep(NA, term)
for (i in 1:term) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_benefits - future_inflows)
}
reserve_increase <- c(reserves[2:term], 0) - c(reserves[1:term])
# ---- profits
profits <- rep(NA, 20)
for (i in 1:term) {
# account for inforce.
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profits[i] <- cash_flow + interest - reserve_increase[i]
}
# present value
profit <- sum(discount_factor * profits)
}
calculateProfit(200)
calculateProfit<- function(premium) {
term <- 20
death_benefit <- 50000
interest_rates <- rep(0.03, term)
discount_addition <- 0.05
discount_rates <- interest_rates + discount_addition
commission_percentages <- c(0.8, rep(0.05, 19))
expenses <- c(100, rep(12.5, 19))
lapse_rates <- rep(0.01, term)
mortality_rates <- seq(0.001222, 0.002522, length.out = term)
premium_loading <- 0.3 # charge on premium to make profit.
#premium <- 200 # change to see profit.
annual_discount_factor <- 1/(1 + discount_rates)
discount_factor <- rep(NA, term) # used to discount to present value.
discount_factor[1] <- annual_discount_factor[1]
for (i in 2:term) {
discount_factor[i] <- annual_discount_factor[i] * discount_factor[i-1]
}
discount_factors_advance <- c(1, discount_factor[1:term-1])
inforce_eop <- rep(NA, term)
inforce_eop[1] <- 1 * ( 1 - mortality_rates[1] - lapse_rates[1])
for (i in 2:term) {
inforce_eop[i] <-  inforce_eop[i-1] * (1 - mortality_rates[i] - lapse_rates[i])
}
inforce_sop <- c(1, inforce_eop[1: term-1])
deaths <- inforce_sop * mortality_rates
lapses <- inforce_sop * lapse_rates
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum(discount_factors_advance * inforce_sop)
expected_payout <- sum(discount_factor * deaths) * death_benefit
net_premium <- expected_payout / expected_inflows
# find net premium reserves:
# to cover years 1 to last year. ie available at start of each year
reserves <- rep(NA, term)
for (i in 1:term) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_benefits - future_inflows)
}
reserve_increase <- c(reserves[2:term], 0) - c(reserves[1:term])
# ---- profits
profits <- rep(NA, 20)
for (i in 1:term) {
# account for inforce.
cash_flow <- inforce_sop[i] * (premium - expenses[i] - commission_percentages[i] * premium) - death_benefit * deaths[i]
interest <- ((cash_flow + death_benefit*deaths[i]) + reserves[i]) * interest_rates[i]
profits[i] <- cash_flow + interest - reserve_increase[i]
}
# present value
profit <- sum(discount_factor * profits)
return(profit)
}
calculateProfit(200)
?renderText
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
output$profit <- renderText({
calculateProfit(input$premium)
})
}
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Life insurance"),
sidebarLayout(
sidebarPanel(
numericInput("premium",
"Annual Premium",
value = 200)
),
mainPanel(
textOutput("profit")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
calculateProfit<- function(premium) {
term <- 20
death_benefit <- 50000
interest_rates <- rep(0.03, term)
discount_addition <- 0.05
discount_rates <- interest_rates + discount_addition
commission_percentages <- c(0.8, rep(0.05, 19))
expenses <- c(100, rep(12.5, 19))
lapse_rates <- rep(0.01, term)
mortality_rates <- seq(0.001222, 0.002522, length.out = term)
premium_loading <- 0.3 # charge on premium to make profit.
#premium <- 200 # change to see profit.
annual_discount_factor <- 1/(1 + discount_rates)
discount_factor <- rep(NA, term) # used to discount to present value.
discount_factor[1] <- annual_discount_factor[1]
for (i in 2:term) {
discount_factor[i] <- annual_discount_factor[i] * discount_factor[i-1]
}
discount_factors_advance <- c(1, discount_factor[1:term-1])
inforce_eop <- rep(NA, term)
inforce_eop[1] <- 1 * ( 1 - mortality_rates[1] - lapse_rates[1])
for (i in 2:term) {
inforce_eop[i] <-  inforce_eop[i-1] * (1 - mortality_rates[i] - lapse_rates[i])
}
inforce_sop <- c(1, inforce_eop[1: term-1])
deaths <- inforce_sop * mortality_rates
lapses <- inforce_sop * lapse_rates
# ---- Reserving - Net premium reserves.
# find net premium first: expected inflows * net premium = expected payout
expected_inflows <- sum(discount_factors_advance * inforce_sop)
expected_payout <- sum(discount_factor * deaths) * death_benefit
net_premium <- expected_payout / expected_inflows
# find net premium reserves:
# to cover years 1 to last year. ie available at start of each year
reserves <- rep(NA, term)
for (i in 1:term) {
future_inflows <- sum(discount_factors_advance[i:term] * inforce_sop[i:term]) * net_premium
future_benefits <-  sum(discount_factor[i:term] * deaths[i:term]) * death_benefit
reserves[i] <- (future_benefits - future_inflows)
}
reserve_increase <- c(reserves[2:term], 0) - c(reserves[1:term])
# ---- profits
profits <- rep(NA, term)
cash_flow <- inforce_sop * (rep(premium, term) - expenses - commission_percentages * premium) - death_benefit * deaths
interest <- ((cash_flow + death_benefit*deaths) + reserves) * interest_rates
profits <- cash_flow + interest - reserve_increase
# present value
profit <- sum(discount_factor * profits)
#return(profit)
sheet <- data.frame("year" = seq(1: term), "deaths" = deaths, "lapses" = lapses, "cash_flow" = cash_flow, "interest" = interest, "profit" = profits)
print("called")
return(list("sheet" = sheet, "profit" = profit))
}
library(shiny)
source("playground.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Life insurance"),
sidebarLayout(
sidebarPanel(
numericInput("premium",
"Annual Premium",
value = 200)
),
mainPanel(
textOutput("profit"),
tableOutput("cashflows")
)
)
)
# Define server logic
server <- function(input, output) {
calculations <- reactive(calculateProfit(input$premium))
output$profit <- renderText({
calculations()$profit
})
output$cashflows <- renderTable(calculations()$sheet)
}
# Run the application
shinyApp(ui = ui, server = server)
?textOutput
?renderText
"dlkafjdf fdsf " + 33
paste("sldkfjdf fdf", 341)
# Define server logic
server <- function(input, output) {
calculations <- reactive(calculateProfit(input$premium))
output$profit <- renderText({
paste("Present value of profit:", calculations()$profit)
})
output$cashflows <- renderTable(calculations()$sheet)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('life')
runApp()
install.packages(rsconnect)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='andrewang', token='21A15711044FEB5B89A0A32C7D500431', secret='TIOBCzK8AbpYneb63s6EYLzTSIkQ5rPsk1QHuaqz')
library(rsconnect)
deployApp()
install.packages('fontawesome')
deployApp()
install.packages('rlang')
install.packages('rtools')
install.packages('Rtools')
deployApp()
return(list("sheet" = sheet, "profit" = profit))
shiny::runApp()
library(rsconnect)
deployApp(
)
update.packages()
update.packages('rlang')
update.packages('rlasjfkajfoais')
install.packages('rlang')
R.version
install.packages('rlang', dependencies = TRUE)
install.packages('rlang', dependencies = TRUE)
gc()
install.packages('rlang', dependencies = TRUE)
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
